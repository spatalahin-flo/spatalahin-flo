{
	"info": {
		"_postman_id": "7dcd9e13-7d9b-4269-8260-d7bbd2e3db28",
		"name": "Cashout Request Flow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15182028"
	},
	"item": [
		{
			"name": "[Cashout Request]",
			"item": [
				{
					"name": "[Cashout Request] Get User Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"UserId is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"UserID\"));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.collectionVariables.set(\"account_id\", jsonData.account_id);",
									"",
									"pm.collectionVariables.set(\"StartedUserBalance\", jsonData.balance);",
									"pm.collectionVariables.set(\"ExpectedUserBalance\", parseFloat(pm.collectionVariables.get(\"StartedUserBalance\")) - 1);",
									"",
									"pm.collectionVariables.set('helper', function loadhelper() {",
									"\tconst helper = {};",
									"\tconst response = pm.response.json();",
									"",
									"\tfunction retry(maxRetries, sleep) {",
									"\t\tlet retries = pm.collectionVariables.get('retries') || 0;",
									"\t\tconsole.warn('retries used ' + retries + ' of ' + maxRetries);",
									"",
									"\t\tsetTimeout(function() {",
									"\t\t}, sleep);",
									"",
									"\t\tif (retries >= maxRetries) {",
									"\t\t\t// Reset variable",
									"\t\t\tpm.collectionVariables.set('retries', 0);",
									"\t\t\tconsole.warn('Reset retries. Failed after ' + retries);",
									"\t\t\tpm.test('The maximum number of attempts has been reached', () => {",
									"\t\t\t\tthrow new Error('');",
									"\t\t\t});",
									"\t\t\treturn;",
									"\t\t}",
									"",
									"\t\tpostman.setNextRequest(pm.info.requestName);",
									"\t\tpm.collectionVariables.set('retries', ++retries);",
									"\t\tconsole.warn('Increase retries  ' + retries);",
									"\t}",
									"",
									"    \thelper.retryCashoutRequestStatusCheck = (maxRetries, sleep = 200) => {            ",
									"",
									"\t\tconst isCashoutRequestCompleted = response?.status === 'COMPLETED';",
									"\t\tif (isCashoutRequestCompleted) {",
									"\t\t\tconsole.warn('Reset retries on request Success ' + pm.collectionVariables.get('retries'));",
									"\t\t\tpm.collectionVariables.set('retries', 0);",
									"\t\t\treturn;",
									"\t\t}",
									"",
									"\t\tretry(maxRetries, sleep);",
									"\t};",
									"",
									"",
									"\thelper.retryUserBalanceCheck = (maxRetries, sleep = 200) => {",
									"\t\tconst isEqual = response.balance === (parseFloat(pm.collectionVariables.get('ExpectedUserBalance')));",
									"\t\tif (isEqual) {",
									"\t\t\tconsole.warn('Reset retries on request Success ' + pm.collectionVariables.get('retries'));",
									"\t\t\tpm.collectionVariables.set('retries', 0);",
									"\t\t\treturn;",
									"\t\t}",
									"",
									"\t\tretry(maxRetries, sleep);",
									"\t};",
									"",
									"",
									"\thelper.retryDistributorBalanceCheck = (maxRetries, sleep = 200) => {",
									"\t\tconst isEqual = response.balance === (parseFloat(pm.collectionVariables.get('ExpectedDistributorBalance')));",
									"\t\tif (isEqual) {",
									"\t\t\tconsole.warn('Reset retries on request Success ' + pm.collectionVariables.get('retries'));",
									"\t\t\tpm.collectionVariables.set('retries', 0);",
									"            return;",
									"\t\t}",
									"",
									"\t\tretry(maxRetries, sleep);",
									"\t};",
									"",
									"\treturn helper;",
									"} + '; loadhelper();');",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}accounts?user_id={{UserID}}",
							"host": [
								"{{apiURL}}accounts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{UserID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Get Distributor Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"UserId is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user_id).to.eql(pm.collectionVariables.get(\"UserID\"));",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.collectionVariables.set(\"account_id\", jsonData.account_id);",
									"",
									"pm.collectionVariables.set(\"StartedDistributorBalance\", jsonData.balance);",
									"pm.collectionVariables.set(\"ExpectedDistributorBalance\", parseFloat(pm.collectionVariables.get(\"StartedDistributorBalance\")) + 0.99004);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}distributors/{{DistributorID}}",
							"host": [
								"{{apiURL}}distributors"
							],
							"path": [
								"{{DistributorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Create Cashout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"cashout_id\", jsonData.cashout_id);",
									"",
									"pm.test(\"requester_id is the same\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.requester_id).to.eql(pm.collectionVariables.get(\"UserID\"));",
									"});",
									"",
									"console.log(jsonData.cashout_id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"requester_id\": \"{{UserID}}\",\n    \"amount_requested\": 1,\n    \"amount_received\": 1,\n    \"total_amount\": 1,\n    \"exchange_rate\": 1,\n    \"payment_details\": {\n        \"account_id\": \"{{account_id}}\",\n        \"account_mask\": \"string\",\n        \"account_type\": \"JAWUDI\",\n        \"currency_code\": \"USD\",\n        \"country_code\": \"US\"\n    },\n    \"fees\": {\n        \"amount\": 1,\n        \"currency_code\": \"USD\",\n        \"exchange_rate\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}cashouts",
							"host": [
								"{{apiURL}}cashouts"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Send Confirmation Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}cashouts/confirmation/{{cashout_id}}",
							"host": [
								"{{apiURL}}cashouts"
							],
							"path": [
								"confirmation",
								"{{cashout_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Fulfil Cashout Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body contains trans_id string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"trans_id\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.collectionVariables.set(\"trans_id\", jsonData.trans_id);",
									"console.log(jsonData.trans_id)",
									"",
									"setTimeout(function(){}, [15000]);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"cashout_id\": \"{{cashout_id}}\",\n    \"confirmation_code\": \"000000\",\n    \"fulfilled_by\": {\n        \"distributor_id\": \"{{DistributorID}}\",\n        \"business_name\": \"string\",\n        \"business_phone\": \"string\",\n        \"business_location\": {\n            \"longitude\": \"string\",\n            \"latitude\": \"string\"\n        },\n        \"currency_code\": \"USD\",\n        \"country_code\": \"US\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{apiURL}}cashouts/confirmation",
							"host": [
								"{{apiURL}}cashouts"
							],
							"path": [
								"confirmation"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request]  Get Cashout and Check Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const helper = eval(pm.collectionVariables.get(\"helper\"));",
									"pm.test(\"Get Status of Load Wallet\", helper.retryCashoutRequestStatusCheck(10, 20000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}cashouts/{{cashout_id}}",
							"host": [
								"{{apiURL}}cashouts"
							],
							"path": [
								"{{cashout_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Get User Balance After Cashout Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const helper = eval(pm.collectionVariables.get(\"helper\"));",
									"pm.test(\"Get User Balance after Load Wallet\", helper.retryUserBalanceCheck(10, 20000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiURL}}accounts?user_id={{UserID}}",
							"host": [
								"{{apiURL}}accounts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{UserID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Get Distributor Balance After Cashout Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const helper = eval(pm.collectionVariables.get(\"helper\"));",
									"pm.test(\"Get Distributor Balance after Load Wallet\", helper.retryDistributorBalanceCheck(10, 20000));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}distributors/{{DistributorID}}",
							"host": [
								"{{apiURL}}distributors"
							],
							"path": [
								"{{DistributorID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request] Get Cashouts Over 24 hours",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"requester_id is valid\", function () {",
									"    var jsonData = pm.response.json()",
									"    pm.expect(jsonData[0].requester_id).is.eql(pm.collectionVariables.get(\"UserID\"))",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}cashouts/user/{{UserID}}/24hours",
							"host": [
								"{{apiURL}}cashouts"
							],
							"path": [
								"user",
								"{{UserID}}",
								"24hours"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Cashout Request / Distributors] Get Distributor Commissions Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Distributor_id is valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.distributor_id).to.eql(pm.collectionVariables.get(\"DistributorID\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{apiURL}}distributors/{{DistributorID}}/commissions/{{trans_id}}",
							"host": [
								"{{apiURL}}distributors"
							],
							"path": [
								"{{DistributorID}}",
								"commissions",
								"{{trans_id}}"
							],
							"query": [
								{
									"key": "limit",
									"value": "100",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "J2U6Zgg8Og3WEHv14oZOxKAwycPOyq28sV6kPGW0",
				"type": "string"
			},
			{
				"key": "key",
				"value": "x-api-key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "apiURL",
			"value": "https://api.dev.jawudi.net/api/v1/",
			"type": "string"
		},
		{
			"key": "account_id",
			"value": "GCD25T4ZQ5GJY5Y6DLL4LKX3SSLPW2XWHJCXKRSSJM57ONLLMPARRP3E",
			"type": "string"
		},
		{
			"key": "request_id",
			"value": "co_107d7e1d-4bc8-4389-b5b9-310869d6a70e",
			"type": "string"
		},
		{
			"key": "UserID",
			"value": "64340841da756466c0d21531",
			"type": "string"
		},
		{
			"key": "SenderID",
			"value": "642fc25ada756466c0d1fb30",
			"type": "string"
		},
		{
			"key": "cashout_id",
			"value": ""
		},
		{
			"key": "confirmation_code",
			"value": ""
		},
		{
			"key": "StartedUserBalance",
			"value": ""
		},
		{
			"key": "ExpectedUserBalance",
			"value": ""
		},
		{
			"key": "DistributorID",
			"value": "US-3088410716",
			"type": "string"
		},
		{
			"key": "trans_id",
			"value": "trans_3af943da-2ac9-4796-a5f4-9e294b467195",
			"type": "string"
		},
		{
			"key": "StartedDistributorBalance",
			"value": "",
			"type": "string"
		},
		{
			"key": "ExpectedDistributorBalance",
			"value": "",
			"type": "string"
		},
		{
			"key": "retries",
			"value": "0",
			"type": "string"
		},
		{
			"key": "helper",
			"value": ""
		}
	]
}